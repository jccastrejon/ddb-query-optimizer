/* Generated By:JJTree&JavaCC: Do not edit this line. SqlParser.java */
package mx.itesm.ddb.parser;

import java.util.List;
import java.util.ArrayList;

import mx.itesm.ddb.util.ConditionData;
import mx.itesm.ddb.util.ConditionOperator;
import mx.itesm.ddb.util.ExpressionData;
import mx.itesm.ddb.util.ExpressionOperator;
import mx.itesm.ddb.util.QueryData;
import mx.itesm.ddb.util.RelationData;

import mx.itesm.ddb.util.impl.AliasExpressionData;
import mx.itesm.ddb.util.impl.ConditionExpressionData;
import mx.itesm.ddb.util.impl.ExpressionConditionData;
import mx.itesm.ddb.util.impl.OperationConditionData;
import mx.itesm.ddb.util.impl.OperationExpressionData;
import mx.itesm.ddb.util.impl.QueryConditionData;
import mx.itesm.ddb.util.impl.QueryExpressionData;
import mx.itesm.ddb.util.impl.QueryRelationData;
import mx.itesm.ddb.util.impl.SimpleExpressionData;
import mx.itesm.ddb.util.impl.SimpleRelationData;

/**
 * SQL Parser.
 * 
 * @author jccastrejon
 * 
 */
public class SqlParser/*@bgen(jjtree)*/implements SqlParserTreeConstants, SqlParserConstants {/*@bgen(jjtree)*/
  protected JJTSqlParserState jjtree = new JJTSqlParserState();

/**
 * Represents a SQL code block.
 */
  final public QueryData QueryStatement() throws ParseException {
 /*@bgen(jjtree) QueryStatement */
        ASTQueryStatement jjtn000 = new ASTQueryStatement(this, JJTQUERYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));QueryData returnValue;
    try {
      returnValue = Query();
      jj_consume_token(32);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * SQL query.
 */
  final public QueryData Query() throws ParseException {
 /*@bgen(jjtree) Query */
        ASTQuery jjtn000 = new ASTQuery(this, JJTQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));QueryData returnValue;
        List<ExpressionData> attributes;
        List<RelationData> relations;
        ConditionData conditions = null;
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      attributes = SelectList();
      relations = FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        conditions = WhereClause();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        returnValue = new QueryData(attributes, relations, conditions);
        {if (true) return returnValue;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Result attributes.
 */
  final public List<ExpressionData> SelectList() throws ParseException {
 /*@bgen(jjtree) SelectList */
        ASTSelectList jjtn000 = new ASTSelectList(this, JJTSELECTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));List<ExpressionData> returnValue = new ArrayList<ExpressionData>();
        ExpressionData expression;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
                returnValue.add(new SimpleExpressionData("*"));
        break;
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case 36:
      case 37:
      case 40:
        expression = SelectItem();
                returnValue.add(expression);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
          jj_consume_token(34);
          expression = SelectItem();
                                returnValue.add(expression);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionData SelectItem() throws ParseException {
 /*@bgen(jjtree) SelectItem */
        ASTSelectItem jjtn000 = new ASTSelectItem(this, JJTSELECTITEM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ExpressionData returnValue;
        Token token = null;
    try {
      if (jj_2_1(2)) {
        token = jj_consume_token(S_IDENTIFIER);
        jj_consume_token(35);
                                returnValue = new SimpleExpressionData(token.image + ".*");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 36:
        case 37:
        case 40:
          returnValue = SQLSimpleExpression();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case S_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        token = jj_consume_token(S_IDENTIFIER);
                        returnValue = new AliasExpressionData(returnValue, token.image);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionData SQLSimpleExpression() throws ParseException {
 /*@bgen(jjtree) SQLSimpleExpression */
        ASTSQLSimpleExpression jjtn000 = new ASTSQLSimpleExpression(this, JJTSQLSIMPLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ExpressionData returnValue;
        ExpressionData firstExpression;
        ExpressionData secondExpression;
        ExpressionOperator operator;
    try {
      firstExpression = SQLMultiplicativeExpression();
                        returnValue = firstExpression;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
        case 37:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
                                        operator = ExpressionOperator.ArithmeticOperator.ADD_OPERATOR;
          break;
        case 37:
          jj_consume_token(37);
                                        operator = ExpressionOperator.ArithmeticOperator.SUBSTRACT_OPERATOR;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        secondExpression = SQLMultiplicativeExpression();
                                returnValue = new OperationExpressionData(operator, firstExpression, secondExpression);
                                firstExpression = returnValue;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionData SQLMultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) SQLMultiplicativeExpression */
        ASTSQLMultiplicativeExpression jjtn000 = new ASTSQLMultiplicativeExpression(this, JJTSQLMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ExpressionData returnValue;
        ExpressionData firstExpression;
        ExpressionData secondExpression;
        ExpressionOperator operator;
    try {
      firstExpression = SQLUnaryExpression();
                        returnValue = firstExpression;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
        case 38:
        case 39:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
                                        operator = ExpressionOperator.ArithmeticOperator.MULTIPLY_OPERATOR;
          break;
        case 38:
          jj_consume_token(38);
                                        operator = ExpressionOperator.ArithmeticOperator.DIVIDE_OPERATOR;
          break;
        case 39:
          jj_consume_token(39);
                                        operator = ExpressionOperator.ArithmeticOperator.EQUALS_OPERATOR;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        secondExpression = SQLUnaryExpression();
                                returnValue = new OperationExpressionData(operator, firstExpression, secondExpression);
                                firstExpression = returnValue;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionData SQLUnaryExpression() throws ParseException {
 /*@bgen(jjtree) SQLUnaryExpression */
        ASTSQLUnaryExpression jjtn000 = new ASTSQLUnaryExpression(this, JJTSQLUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ExpressionData returnValue;
        ExpressionData expression;
        ExpressionOperator operator = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
      case 37:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
                        operator = ExpressionOperator.ArithmeticOperator.ADD_OPERATOR;
          break;
        case 37:
          jj_consume_token(37);
                        operator = ExpressionOperator.ArithmeticOperator.SUBSTRACT_OPERATOR;
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      expression = SQLPrimaryExpression();
                returnValue = expression;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if(operator != null){
                        returnValue = new OperationExpressionData(operator, expression);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionData SQLPrimaryExpression() throws ParseException {
 /*@bgen(jjtree) SQLPrimaryExpression */
        ASTSQLPrimaryExpression jjtn000 = new ASTSQLPrimaryExpression(this, JJTSQLPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ExpressionData returnValue = null;
        String simpleExpression = null;
        Token token;
        QueryData queryData;
        ConditionData conditionData;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_NUMBER:
        token = jj_consume_token(S_NUMBER);
                simpleExpression = token.image;
        break;
      case S_CHAR_LITERAL:
        token = jj_consume_token(S_CHAR_LITERAL);
                simpleExpression = token.image;
        break;
      case S_IDENTIFIER:
        token = jj_consume_token(S_IDENTIFIER);
                simpleExpression = token.image;
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
                simpleExpression = "NULL";
        break;
      case 40:
        jj_consume_token(40);
        if (jj_2_2(3)) {
          queryData = Query();
                                        returnValue = new QueryExpressionData(queryData);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_EXISTS:
          case K_NOT:
          case K_NULL:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_CHAR_LITERAL:
          case 36:
          case 37:
          case 40:
            conditionData = SQLExpression();
                                        returnValue = new ConditionExpressionData(conditionData);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(41);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if(simpleExpression != null){
                        returnValue = new SimpleExpressionData(simpleExpression);
                }
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLExpression() throws ParseException {
 /*@bgen(jjtree) SQLExpression */
        ASTSQLExpression jjtn000 = new ASTSQLExpression(this, JJTSQLEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionData firstCondition;
        ConditionData secondCondition;
    try {
      firstCondition = SQLAndExpression();
                returnValue = firstCondition;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        jj_consume_token(K_OR);
        secondCondition = SQLAndExpression();
                                returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.OR_OPERATOR,
                                        firstCondition, secondCondition);
                                firstCondition = returnValue;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLAndExpression() throws ParseException {
 /*@bgen(jjtree) SQLAndExpression */
        ASTSQLAndExpression jjtn000 = new ASTSQLAndExpression(this, JJTSQLANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionData firstCondition;
        ConditionData secondCondition;
    try {
      firstCondition = SQLUnaryLogicalExpression();
                returnValue = firstCondition;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_5;
        }
        jj_consume_token(K_AND);
        secondCondition = SQLUnaryLogicalExpression();
                                returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.AND_OPERATOR,
                                        firstCondition, secondCondition);
                                firstCondition = returnValue;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLUnaryLogicalExpression() throws ParseException {
 /*@bgen(jjtree) SQLUnaryLogicalExpression */
        ASTSQLUnaryLogicalExpression jjtn000 = new ASTSQLUnaryLogicalExpression(this, JJTSQLUNARYLOGICALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData condition;
        ConditionOperator operator = null;
    try {
      if (jj_2_3(2)) {
        condition = ExistsClause();
                operator = ConditionOperator.UnaryOperator.EXISTS_OPERATOR;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 36:
        case 37:
        case 40:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
                                        operator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          condition = SQLRelationalExpression();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return new OperationConditionData(operator, condition);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData ExistsClause() throws ParseException {
 /*@bgen(jjtree) ExistsClause */
        ASTExistsClause jjtn000 = new ASTExistsClause(this, JJTEXISTSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));QueryData queryData;
        ConditionData returnValue;
        ConditionOperator notOperator = null;
        ConditionOperator existsOperator = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
                        notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(K_EXISTS);
                existsOperator = ConditionOperator.UnaryOperator.EXISTS_OPERATOR;
      jj_consume_token(40);
      queryData = Query();
      jj_consume_token(41);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                returnValue = new OperationConditionData(existsOperator, new QueryConditionData(queryData));

                if(notOperator != null){
                        returnValue = new OperationConditionData(notOperator, returnValue);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLRelationalExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalExpression */
        ASTSQLRelationalExpression jjtn000 = new ASTSQLRelationalExpression(this, JJTSQLRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionData condition = null;
        ConditionOperator nullOperator = null;
        ExpressionData expression;
        List<ConditionData> conditions = null;
    try {
      if (jj_2_4(2147483647)) {
        jj_consume_token(40);
        returnValue = SQLExpressionList();
        jj_consume_token(41);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 36:
        case 37:
        case 40:
          expression = SQLSimpleExpression();
                                        returnValue = new ExpressionConditionData(expression);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:
      case 40:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_ANY:
        case 40:
          condition = SQLRelationalOperatorExpression();
          break;
        default:
          jj_la1[22] = jj_gen;
          if (jj_2_5(2)) {
            condition = SQLInClause();
          } else if (jj_2_6(2)) {
            condition = SQLBetweenClause();
          } else if (jj_2_7(2)) {
            condition = SQLLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_IS:
              nullOperator = IsNullClause();
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if(nullOperator != null) {
                        returnValue = new OperationConditionData(nullOperator, returnValue);
                } else if (condition != null) {
                        conditions = new ArrayList<ConditionData>();
                conditions.add(returnValue);
                conditions.addAll(((OperationConditionData)condition).getConditions());
                returnValue = new OperationConditionData(((OperationConditionData)condition).getOperator(), conditions);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLExpressionList() throws ParseException {
 /*@bgen(jjtree) SQLExpressionList */
        ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(this, JJTSQLEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionData firstCondition;
        ConditionData secondCondition;
    try {
      firstCondition = SQLExpression();
                returnValue = firstCondition;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_6;
        }
        jj_consume_token(34);
        secondCondition = SQLExpression();
                                returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.COMMA_OPERATOR,
                                        firstCondition, secondCondition);
                                firstCondition = returnValue;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLRelationalOperatorExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalOperatorExpression */
        ASTSQLRelationalOperatorExpression jjtn000 = new ASTSQLRelationalOperatorExpression(this, JJTSQLRELATIONALOPERATOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionOperator operator = null;
        QueryData queryData;
    try {
      if (jj_2_8(2147483647)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                operator = ConditionOperator.UnaryOperator.ALL_OPERATOR;
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
                                operator = ConditionOperator.UnaryOperator.ANY_OPERATOR;
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(40);
      queryData = Query();
                        returnValue = new QueryConditionData(queryData);
      jj_consume_token(41);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if(operator != null) {
                        returnValue = new OperationConditionData(operator, returnValue);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLInClause() throws ParseException {
 /*@bgen(jjtree) SQLInClause */
        ASTSQLInClause jjtn000 = new ASTSQLInClause(this, JJTSQLINCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionOperator notOperator = null;
        ConditionOperator inOperator = null;
        QueryData queryData;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
                        notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
                inOperator = ConditionOperator.BinaryOperator.IN_OPERATOR;
      jj_consume_token(40);
      if (jj_2_9(3)) {
        queryData = Query();
                        returnValue = new QueryConditionData(queryData);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 36:
        case 37:
        case 40:
          returnValue = SQLExpressionList();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(41);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                returnValue = new OperationConditionData(inOperator, returnValue);

                if(notOperator != null) {
                        returnValue = new OperationConditionData(notOperator, returnValue);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLBetweenClause() throws ParseException {
 /*@bgen(jjtree) SQLBetweenClause */
        ASTSQLBetweenClause jjtn000 = new ASTSQLBetweenClause(this, JJTSQLBETWEENCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ConditionData firstCondition;
        ConditionData secondCondition;
        ExpressionData expression;
        ConditionOperator notOperator = null;
        ConditionOperator betweenOperator = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
                        notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
                betweenOperator = ConditionOperator.BinaryOperator.BETWEEN_OPERATOR;
      expression = SQLSimpleExpression();
                firstCondition = new ExpressionConditionData(expression);
      jj_consume_token(K_AND);
      expression = SQLSimpleExpression();
                secondCondition = new ExpressionConditionData(expression);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                returnValue = new OperationConditionData(betweenOperator, firstCondition, secondCondition);

                if(notOperator != null) {
                        returnValue = new OperationConditionData(notOperator, returnValue);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData SQLLikeClause() throws ParseException {
 /*@bgen(jjtree) SQLLikeClause */
        ASTSQLLikeClause jjtn000 = new ASTSQLLikeClause(this, JJTSQLLIKECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
        ExpressionData expression;
        ExpressionConditionData expressionCondition;
        ConditionOperator notOperator = null;
        ConditionOperator likeOperator = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
                        notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
                        likeOperator = ConditionOperator.BinaryOperator.LIKE_OPERATOR;
      expression = SQLSimpleExpression();
                        expressionCondition = new ExpressionConditionData(expression);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                returnValue = new OperationConditionData(likeOperator, expressionCondition);

                if(notOperator != null) {
                        returnValue = new OperationConditionData(notOperator, returnValue);
                }

                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionOperator IsNullClause() throws ParseException {
 /*@bgen(jjtree) IsNullClause */
        ASTIsNullClause jjtn000 = new ASTIsNullClause(this, JJTISNULLCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionOperator returnValue;
    try {
      jj_consume_token(K_IS);
                returnValue = ConditionOperator.UnaryOperator.IS_NULL_OPERATOR;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
                        returnValue = ConditionOperator.UnaryOperator.IS_NOT_NULL_OPERATOR;
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return returnValue;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<RelationData> FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
        ASTFromClause jjtn000 = new ASTFromClause(this, JJTFROMCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));List<RelationData> returnValue = new ArrayList<RelationData>();
        RelationData relation;
    try {
      jj_consume_token(K_FROM);
      relation = QueryTableExpression();
        returnValue.add(relation);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_7;
        }
        jj_consume_token(34);
        relation = QueryTableExpression();
                returnValue.add(relation);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return returnValue;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public RelationData QueryTableExpression() throws ParseException {
 /*@bgen(jjtree) QueryTableExpression */
        ASTQueryTableExpression jjtn000 = new ASTQueryTableExpression(this, JJTQUERYTABLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));RelationData returnValue = null;
        Token token = null;
        QueryData queryData = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        token = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[34] = jj_gen;
        if (jj_2_10(3)) {
          jj_consume_token(40);
          queryData = Query();
          jj_consume_token(41);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
                if(token != null){
                        returnValue = new SimpleRelationData(token.image);
                } else if(queryData != null){
                        returnValue = new QueryRelationData(queryData);
                }
                {if (true) return returnValue;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionData WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
        ASTWhereClause jjtn000 = new ASTWhereClause(this, JJTWHERECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));ConditionData returnValue;
    try {
      jj_consume_token(K_WHERE);
      returnValue = SQLExpression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return returnValue;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(40)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(40)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(40)) return true;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(K_ANY)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2040,0x2040,0x800000,0x0,0x91100000,0x91100000,0x200,0x10000200,0x0,0x0,0x0,0x0,0x0,0x0,0x91184000,0x91100000,0x200000,0x80,0x80000,0x91180000,0x80000,0x91100000,0x140,0x20000,0xf0940,0x0,0x140,0x140,0x80000,0x91184000,0x80000,0x80000,0x80000,0x0,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x4,0x132,0x130,0x0,0x0,0x30,0x30,0xc2,0xc2,0x30,0x30,0x130,0x100,0x0,0x0,0x0,0x130,0x0,0x130,0x100,0x0,0x100,0x4,0x0,0x0,0x0,0x130,0x0,0x0,0x0,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
