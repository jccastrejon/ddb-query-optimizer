/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. sql.jj */
/*@egen*/options {
	STATIC=true;
               
                                       
                      
    IGNORE_CASE=true;
                 
}

PARSER_BEGIN(SqlParser)

package mx.itesm.ddb.parser; 

import java.util.List;
import java.util.ArrayList;
 
import mx.itesm.ddb.util.ConditionData;
import mx.itesm.ddb.util.ConditionOperator;
import mx.itesm.ddb.util.ExpressionData;
import mx.itesm.ddb.util.ExpressionOperator;
import mx.itesm.ddb.util.QueryData;
import mx.itesm.ddb.util.RelationData;

import mx.itesm.ddb.util.impl.AliasExpressionData;
import mx.itesm.ddb.util.impl.ConditionExpressionData;
import mx.itesm.ddb.util.impl.ExpressionConditionData;
import mx.itesm.ddb.util.impl.OperationConditionData;
import mx.itesm.ddb.util.impl.OperationExpressionData;
import mx.itesm.ddb.util.impl.QueryConditionData;
import mx.itesm.ddb.util.impl.QueryExpressionData;
import mx.itesm.ddb.util.impl.QueryRelationData;
import mx.itesm.ddb.util.impl.SimpleExpressionData;
import mx.itesm.ddb.util.impl.SimpleRelationData;

/**
 * SQL Parser.
 * 
 * @author jccastrejon
 * 
 */ 
public class SqlParser/*@bgen(jjtree)*/implements SqlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSqlParserState jjtree = new JJTSqlParserState();

/*@egen*/
}

PARSER_END(SqlParser)

/* White spaces */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* SQL Select keywords */
TOKEN :
{
	<K_ALL:"ALL">
|   <K_AND:"AND">
|   <K_ANY:"ANY">
|   <K_AS:"AS">
|   <K_ASC:"ASC">
|	<K_BETWEEN:"BETWEEN">
|   <K_DESC:"DESC">
|   <K_DISTINCT:"DISTINCT">
|   <K_EXISTS:"EXISTS">
|   <K_FROM:"FROM">
|	<K_IN:"IN">
|	<K_IS:"IS">
|   <K_LIKE:"LIKE">
|   <K_NOT:"NOT">
|   <K_NULL:"NULL">
|   <K_OR:"OR">
|   <K_SELECT:"SELECT">
|   <K_WHERE:"WHERE">
}

/* Numeric constants */
TOKEN :
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?>
| 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>>
| 	< #INTEGER: ( <DIGIT> )+ >
| 	< #DIGIT: ["0" - "9"] >
}

/* Identifiers */
TOKEN:
{
    < S_IDENTIFIER: (<LETTER>)+ (<DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
|	< #LETTER: ["a"-"z", "A"-"Z"] >
|	< #SPECIAL_CHARS: "$" | "_" | "#">
|	< S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
}

/**
 * Represents a SQL code block.
 */
QueryData QueryStatement():
{/*@bgen(jjtree) QueryStatement */
        ASTQueryStatement jjtn000 = new ASTQueryStatement(null, JJTQUERYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	QueryData returnValue;
}
{/*@bgen(jjtree) QueryStatement */
        try {
/*@egen*/
	returnValue = Query()
	";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * SQL query.
 */
QueryData Query() :
{/*@bgen(jjtree) Query */
        ASTQuery jjtn000 = new ASTQuery(null, JJTQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	QueryData returnValue;
	List<ExpressionData> attributes;
	List<RelationData> relations;
	ConditionData conditions = null;
}
{/*@bgen(jjtree) Query */
    try {
/*@egen*/
    "SELECT" [ "ALL" | "DISTINCT" ] 
    attributes = SelectList()
    relations = FromClause()
    [
    	conditions = WhereClause()
    ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	returnValue = new QueryData(attributes, relations, conditions);
    	return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/*
 * Result attributes.
 */
List<ExpressionData> SelectList():
{/*@bgen(jjtree) SelectList */
        ASTSelectList jjtn000 = new ASTSelectList(null, JJTSELECTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	List<ExpressionData> returnValue = new ArrayList<ExpressionData>();
	ExpressionData expression;	
}
{/*@bgen(jjtree) SelectList */
        try {
/*@egen*/
	(
	    "*"
	    {
	    	returnValue.add(new SimpleExpressionData("*"));
	    } 
	    | expression = SelectItem()
	    {
	    	returnValue.add(expression);
	    }
	   	(
	   		"," 
	   		expression = SelectItem()
	   		{
	   			returnValue.add(expression);
	   		}
	   	)*
   	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ExpressionData SelectItem():
{/*@bgen(jjtree) SelectItem */
        ASTSelectItem jjtn000 = new ASTSelectItem(null, JJTSELECTITEM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ExpressionData returnValue;
	Token token = null;
}
{/*@bgen(jjtree) SelectItem */
        try {
/*@egen*/
	(
	    (
			LOOKAHEAD(2) token = <S_IDENTIFIER>".*" // table.*
			{
				returnValue = new SimpleExpressionData(token.image + ".*");
			}
			| returnValue = SQLSimpleExpression() // column name or expression
	    )
	    [ 
	    	[
	    		"AS"
	    	]
	    	token = <S_IDENTIFIER>
	    	{
	    		returnValue = new AliasExpressionData(returnValue, token.image);
	    	}
	    ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ExpressionData SQLSimpleExpression():
{/*@bgen(jjtree) SQLSimpleExpression */
        ASTSQLSimpleExpression jjtn000 = new ASTSQLSimpleExpression(null, JJTSQLSIMPLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ExpressionData returnValue;
	ExpressionData firstExpression;
	ExpressionData secondExpression;
	ExpressionOperator operator;
}
{/*@bgen(jjtree) SQLSimpleExpression */
        try {
/*@egen*/
	(
		firstExpression = SQLMultiplicativeExpression()
		{
			returnValue = firstExpression;
		}
		(
			(
				"+"
				{
					operator = ExpressionOperator.ArithmeticOperator.ADD_OPERATOR;
				}
				| "-"
				{
					operator = ExpressionOperator.ArithmeticOperator.SUBSTRACT_OPERATOR;
				}
			) 
			secondExpression = SQLMultiplicativeExpression()
			{
				returnValue = new OperationExpressionData(operator, firstExpression, secondExpression);
				firstExpression = returnValue;
			}
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


ExpressionData SQLMultiplicativeExpression():
{/*@bgen(jjtree) SQLMultiplicativeExpression */
        ASTSQLMultiplicativeExpression jjtn000 = new ASTSQLMultiplicativeExpression(null, JJTSQLMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ExpressionData returnValue;
	ExpressionData firstExpression;
	ExpressionData secondExpression;
	ExpressionOperator operator;
}
{/*@bgen(jjtree) SQLMultiplicativeExpression */
        try {
/*@egen*/
	(
		firstExpression = SQLUnaryExpression()
		{
			returnValue = firstExpression;
		}
		(
			(
				"*"
				{
					operator = ExpressionOperator.ArithmeticOperator.MULTIPLY_OPERATOR;
				}
				| "/"
				{
					operator = ExpressionOperator.ArithmeticOperator.DIVIDE_OPERATOR;
				}
				| "="							//TODO: Is this correct here?:.
				{
					operator = ExpressionOperator.ArithmeticOperator.EQUALS_OPERATOR;
				}
			)
			secondExpression = SQLUnaryExpression()
			{
				returnValue = new OperationExpressionData(operator, firstExpression, secondExpression);
				firstExpression = returnValue;
			}
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ExpressionData SQLUnaryExpression():
{/*@bgen(jjtree) SQLUnaryExpression */
        ASTSQLUnaryExpression jjtn000 = new ASTSQLUnaryExpression(null, JJTSQLUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ExpressionData returnValue;
	ExpressionData expression;
	ExpressionOperator operator = null;
}
{/*@bgen(jjtree) SQLUnaryExpression */
        try {
/*@egen*/
	(
	    [
	    	"+"
	    	{
	    		operator = ExpressionOperator.ArithmeticOperator.ADD_OPERATOR;
	    	}
	    	| "-"
	    	{
	    		operator = ExpressionOperator.ArithmeticOperator.SUBSTRACT_OPERATOR;
	    	}
	    ] 
	    expression = SQLPrimaryExpression()
	    {
	    	returnValue = expression;
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		if(operator != null){
			returnValue = new OperationExpressionData(operator, expression);	
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ExpressionData SQLPrimaryExpression():
{/*@bgen(jjtree) SQLPrimaryExpression */
        ASTSQLPrimaryExpression jjtn000 = new ASTSQLPrimaryExpression(null, JJTSQLPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ExpressionData returnValue = null;
	String simpleExpression = null;
	Token token;
	QueryData queryData;
	ConditionData conditionData;
}
{/*@bgen(jjtree) SQLPrimaryExpression */
        try {
/*@egen*/
	(
	    token = <S_NUMBER>
	    {
	    	simpleExpression = token.image;
	    }
		| token = <S_CHAR_LITERAL>
	    {
	    	simpleExpression = token.image;
	    }
		| token = <S_IDENTIFIER>
	    {
	    	simpleExpression = token.image;
	    }
		| "NULL"
	    {
	    	simpleExpression = "NULL";
	    }
		| "("
			(
				LOOKAHEAD(3) queryData = Query()
				{
					returnValue = new QueryExpressionData(queryData);
				}
				| conditionData = SQLExpression()
				{
					returnValue = new ConditionExpressionData(conditionData);
				}
			)
		")"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		if(simpleExpression != null){
			returnValue = new SimpleExpressionData(simpleExpression);
		}
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLExpression():
{/*@bgen(jjtree) SQLExpression */
        ASTSQLExpression jjtn000 = new ASTSQLExpression(null, JJTSQLEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionData firstCondition;
	ConditionData secondCondition;
}
{/*@bgen(jjtree) SQLExpression */
        try {
/*@egen*/
	(
	    firstCondition = SQLAndExpression()
	    {
	    	returnValue = firstCondition;
	    }
	    (
	    	"OR"
	    	secondCondition = SQLAndExpression()
	    	{
				returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.OR_OPERATOR, 
					firstCondition, secondCondition);
				firstCondition = returnValue;
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLAndExpression():
{/*@bgen(jjtree) SQLAndExpression */
        ASTSQLAndExpression jjtn000 = new ASTSQLAndExpression(null, JJTSQLANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionData firstCondition;
	ConditionData secondCondition;
}
{/*@bgen(jjtree) SQLAndExpression */
        try {
/*@egen*/
	(
	    firstCondition = SQLUnaryLogicalExpression()
	    {
	    	returnValue = firstCondition;
	    }
	    (
	    	"AND"
	    	secondCondition = SQLUnaryLogicalExpression()
	    	{
				returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.AND_OPERATOR, 
					firstCondition, secondCondition);
				firstCondition = returnValue;
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLUnaryLogicalExpression():
{/*@bgen(jjtree) SQLUnaryLogicalExpression */
        ASTSQLUnaryLogicalExpression jjtn000 = new ASTSQLUnaryLogicalExpression(null, JJTSQLUNARYLOGICALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData condition;
	ConditionOperator operator = null;
}
{/*@bgen(jjtree) SQLUnaryLogicalExpression */
        try {
/*@egen*/
	(
	    LOOKAHEAD(2) condition = ExistsClause()
	    {
	    	operator = ConditionOperator.UnaryOperator.EXISTS_OPERATOR;
	    }
		|(
			[
				"NOT"
				{
					operator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
				}
			]
			condition = SQLRelationalExpression()
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return new OperationConditionData(operator, condition);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData ExistsClause():
{/*@bgen(jjtree) ExistsClause */
        ASTExistsClause jjtn000 = new ASTExistsClause(null, JJTEXISTSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	
	QueryData queryData;
	ConditionData returnValue;
	ConditionOperator notOperator = null;
	ConditionOperator existsOperator = null;
}
{/*@bgen(jjtree) ExistsClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
	    	}
	    ] 
	    "EXISTS"
	    {
	    	existsOperator = ConditionOperator.UnaryOperator.EXISTS_OPERATOR;
	    }
	    "("
	    queryData = Query()
	    ")"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		returnValue = new OperationConditionData(existsOperator, new QueryConditionData(queryData));
		
		if(notOperator != null){
			returnValue = new OperationConditionData(notOperator, returnValue);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLRelationalExpression():
{/*@bgen(jjtree) SQLRelationalExpression */
        ASTSQLRelationalExpression jjtn000 = new ASTSQLRelationalExpression(null, JJTSQLRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionData condition = null;
	ConditionOperator nullOperator = null;
	ExpressionData expression;
	List<ConditionData> conditions = null;
}
{/*@bgen(jjtree) SQLRelationalExpression */
        try {
/*@egen*/
	(   
		(
			LOOKAHEAD(
				"("
				SQLSimpleExpression()
				","
			)
		
			"("
			returnValue = SQLExpressionList()
			")"
			| 
			(
				expression = SQLSimpleExpression()
				{
					returnValue = new ExpressionConditionData(expression);
				}
			)
		)
	    
	    /* Lookahead(2) is required because of NOT IN,NOT BETWEEN and NOT LIKE */
	    (
	        condition = SQLRelationalOperatorExpression()
	        | LOOKAHEAD(2) (condition = SQLInClause())
	        | LOOKAHEAD(2) (condition = SQLBetweenClause())
	        | LOOKAHEAD(2) (condition = SQLLikeClause())
	        | nullOperator = IsNullClause()
	    )?
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		if(nullOperator != null) {
			returnValue = new OperationConditionData(nullOperator, returnValue);
		} else if (condition != null) {
			conditions = new ArrayList<ConditionData>();
	    	conditions.add(returnValue);
	    	conditions.addAll(((OperationConditionData)condition).getConditions());
	        returnValue = new OperationConditionData(((OperationConditionData)condition).getOperator(), conditions);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLExpressionList():
{/*@bgen(jjtree) SQLExpressionList */
        ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(null, JJTSQLEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionData firstCondition;
	ConditionData secondCondition;
}
{/*@bgen(jjtree) SQLExpressionList */
        try {
/*@egen*/
	(
	    firstCondition = SQLExpression()
	    {
	    	returnValue = firstCondition;
	    }
	    (
	    	","
	    	secondCondition = SQLExpression()
	    	{
				returnValue = new OperationConditionData(ConditionOperator.BinaryOperator.COMMA_OPERATOR, 
					firstCondition, secondCondition);
				firstCondition = returnValue;
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLRelationalOperatorExpression():
{/*@bgen(jjtree) SQLRelationalOperatorExpression */
        ASTSQLRelationalOperatorExpression jjtn000 = new ASTSQLRelationalOperatorExpression(null, JJTSQLRELATIONALOPERATOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionOperator operator = null;
	QueryData queryData;
}
{/*@bgen(jjtree) SQLRelationalOperatorExpression */
    try {
/*@egen*/
    /* Only after seeing an ANY/ALL or "(" followed by a SubQuery() we can
    determine that is is a sub-query
    */
    (   LOOKAHEAD(
			"ANY"
			| "ALL"
			| "(" "SELECT"
    	)
        (
        	[
        		"ALL"
        		{
        			operator = ConditionOperator.UnaryOperator.ALL_OPERATOR;
        		}
        		| "ANY"
        		{
        			operator = ConditionOperator.UnaryOperator.ANY_OPERATOR;
        		}
        	] 
        	"("
        	queryData = Query()
        	{
        		returnValue = new QueryConditionData(queryData);
        	} 
        	")"
        )
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		if(operator != null) {
			returnValue = new OperationConditionData(operator, returnValue);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ConditionData SQLInClause():
{/*@bgen(jjtree) SQLInClause */
        ASTSQLInClause jjtn000 = new ASTSQLInClause(null, JJTSQLINCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionOperator notOperator = null;
	ConditionOperator inOperator = null;
	QueryData queryData;
}
{/*@bgen(jjtree) SQLInClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
	    	}
	    ] 
	    "IN"
	    {
	    	inOperator = ConditionOperator.BinaryOperator.IN_OPERATOR;
	    } 
	    "("
	    (
	    	LOOKAHEAD(3) queryData = Query()
	    	{
	    		returnValue = new QueryConditionData(queryData);
	    	} 
	    	| returnValue = SQLExpressionList()
	    ) 
	    ")"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		returnValue = new OperationConditionData(inOperator, returnValue);
		
		if(notOperator != null) {
			returnValue = new OperationConditionData(notOperator, returnValue);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLBetweenClause():
{/*@bgen(jjtree) SQLBetweenClause */
        ASTSQLBetweenClause jjtn000 = new ASTSQLBetweenClause(null, JJTSQLBETWEENCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ConditionData firstCondition;
	ConditionData secondCondition;
	ExpressionData expression;
	ConditionOperator notOperator = null;
	ConditionOperator betweenOperator = null;
}
{/*@bgen(jjtree) SQLBetweenClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
	    	}
	    ]
	    "BETWEEN"
	    {
	    	betweenOperator = ConditionOperator.BinaryOperator.BETWEEN_OPERATOR;
	    } 
	    expression = SQLSimpleExpression()
	    {
	    	firstCondition = new ExpressionConditionData(expression);
	    } 
	    "AND"
	    expression = SQLSimpleExpression()
	    {
	    	secondCondition = new ExpressionConditionData(expression);
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		returnValue = new OperationConditionData(betweenOperator, firstCondition, secondCondition);
		
		if(notOperator != null) {
			returnValue = new OperationConditionData(notOperator, returnValue);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionData SQLLikeClause():
{/*@bgen(jjtree) SQLLikeClause */
        ASTSQLLikeClause jjtn000 = new ASTSQLLikeClause(null, JJTSQLLIKECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
	ExpressionData expression;
	ExpressionConditionData expressionCondition;
	ConditionOperator notOperator = null;
	ConditionOperator likeOperator = null;
}
{/*@bgen(jjtree) SQLLikeClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		notOperator = ConditionOperator.UnaryOperator.NOT_OPERATOR;
	    	}
	    ] 
	   	"LIKE"
	   	{
	   		likeOperator = ConditionOperator.BinaryOperator.LIKE_OPERATOR;
	   	}
	   	expression = SQLSimpleExpression()
	   	{
	   		expressionCondition = new ExpressionConditionData(expression);
	   	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		returnValue = new OperationConditionData(likeOperator, expressionCondition);
		
		if(notOperator != null) {
			returnValue = new OperationConditionData(notOperator, returnValue);
		}
		
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ConditionOperator IsNullClause():
{/*@bgen(jjtree) IsNullClause */
        ASTIsNullClause jjtn000 = new ASTIsNullClause(null, JJTISNULLCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionOperator returnValue;
}
{/*@bgen(jjtree) IsNullClause */
        try {
/*@egen*/
	(
	    "IS"
	    {
	    	returnValue = ConditionOperator.UnaryOperator.IS_NULL_OPERATOR;
	    }
	    [
	    	"NOT"
	    	{
	    		returnValue = ConditionOperator.UnaryOperator.IS_NOT_NULL_OPERATOR;
	    	}
	    ]
	    "NULL"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{	
		return returnValue;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

List<RelationData> FromClause():
{/*@bgen(jjtree) FromClause */
        ASTFromClause jjtn000 = new ASTFromClause(null, JJTFROMCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	List<RelationData> returnValue = new ArrayList<RelationData>();
	RelationData relation;
}
{/*@bgen(jjtree) FromClause */
    try {
/*@egen*/
    "FROM" 
    relation = QueryTableExpression()
    {
    	returnValue.add(relation);
    }
    ( 
    	"," relation = QueryTableExpression()
    	{
    		returnValue.add(relation);
    	}
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

RelationData QueryTableExpression():
{/*@bgen(jjtree) QueryTableExpression */
        ASTQueryTableExpression jjtn000 = new ASTQueryTableExpression(null, JJTQUERYTABLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	RelationData returnValue = null;
	Token token = null;
	QueryData queryData = null;
}
{/*@bgen(jjtree) QueryTableExpression */
    try {
/*@egen*/
    (
		token = <S_IDENTIFIER>
		| LOOKAHEAD(3) "(" queryData = Query() ")"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
		if(token != null){
			returnValue = new SimpleRelationData(token.image);
		} else if(queryData != null){
			returnValue = new QueryRelationData(queryData);
		}
		return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ConditionData WhereClause():
{/*@bgen(jjtree) WhereClause */
        ASTWhereClause jjtn000 = new ASTWhereClause(null, JJTWHERECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	ConditionData returnValue;
}
{/*@bgen(jjtree) WhereClause */
        try {
/*@egen*/
	(
    	"WHERE"
    	returnValue = SQLExpression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}