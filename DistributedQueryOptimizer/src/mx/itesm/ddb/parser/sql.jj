/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. sql.jj */
/*@egen*/options {
	STATIC=true;
               
                                             
                                       
                      
    IGNORE_CASE=true;
                 
}

PARSER_BEGIN(SqlParser)

package mx.itesm.ddb.parser; 

import java.util.List;
import java.util.ArrayList;
 
import mx.itesm.ddb.util.QueryData;
import mx.itesm.ddb.util.RelationData;
import mx.itesm.ddb.util.ConditionData;
import mx.itesm.ddb.util.impl.SimpleRelationData;
import mx.itesm.ddb.util.impl.QueryRelationData;

/**
 * SQL Parser.
 * 
 * @author jccastrejon
 * 
 */ 
public class SqlParser/*@bgen(jjtree)*/implements SqlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSqlParserState jjtree = new JJTSqlParserState();

/*@egen*/
}

PARSER_END(SqlParser)

/* White spaces */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* SQL Select keywords */
TOKEN :
{
	<K_ALL:"ALL">
|   <K_AND:"AND">
|   <K_ANY:"ANY">
|   <K_AS:"AS">
|   <K_ASC:"ASC">
|	<K_BETWEEN:"BETWEEN">
|   <K_DESC:"DESC">
|   <K_DISTINCT:"DISTINCT">
|   <K_EXISTS:"EXISTS">
|   <K_FROM:"FROM">
|	<K_IN:"IN">
|	<K_IS:"IS">
|   <K_LIKE:"LIKE">
|   <K_NOT:"NOT">
|   <K_NULL:"NULL">
|   <K_OR:"OR">
|   <K_SELECT:"SELECT">
|   <K_WHERE:"WHERE">
}

/* Numeric constants */
TOKEN :
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?>
| 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>>
| 	< #INTEGER: ( <DIGIT> )+ >
| 	< #DIGIT: ["0" - "9"] >
}

/* Identifiers */
TOKEN:
{
    < S_IDENTIFIER: (<LETTER>)+ (<DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
|	< #LETTER: ["a"-"z", "A"-"Z"] >
|	< #SPECIAL_CHARS: "$" | "_" | "#">
|	< S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
}

/**
 * Represents a SQL code block.
 */
QueryData QueryStatement():
{/*@bgen(jjtree) QueryStatement */
        ASTQueryStatement jjtn000 = new ASTQueryStatement(null, JJTQUERYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	QueryData returnValue;
}
{/*@bgen(jjtree) QueryStatement */
        try {
/*@egen*/
	returnValue = Query()
	";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * SQL query.
 */
QueryData Query() :
{/*@bgen(jjtree) Query */
        ASTQuery jjtn000 = new ASTQuery(null, JJTQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	QueryData returnValue;
	List<String> attributes;
	List<RelationData> relations;
	String conditions = null;
}
{/*@bgen(jjtree) Query */
    try {
/*@egen*/
    "SELECT" [ "ALL" | "DISTINCT" ] 
    attributes = SelectList()
    relations = FromClause()
    [
    	conditions = WhereClause()
    ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	returnValue = new QueryData(attributes, relations, conditions);
    	return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/*
 * Result attributes.
 */
List<String> SelectList():
{/*@bgen(jjtree) SelectList */
        ASTSelectList jjtn000 = new ASTSelectList(null, JJTSELECTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	List<String> returnValue = new ArrayList<String>();
	String attribute;	
}
{/*@bgen(jjtree) SelectList */
        try {
/*@egen*/
	(
	    "*"
	    {
	    	returnValue.add("*");
	    } 
	    | attribute = SelectItem()
	    {
	    	returnValue.add(attribute);
	    }
	   	(
	   		"," attribute = SelectItem()
	   		{
	   			returnValue.add(attribute);
	   		}
	   	)*
   	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SelectItem():
{/*@bgen(jjtree) SelectItem */
        ASTSelectItem jjtn000 = new ASTSelectItem(null, JJTSELECTITEM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	String returnValue = null;
	Token token = null;
}
{/*@bgen(jjtree) SelectItem */
        try {
/*@egen*/
	(
	    (
			LOOKAHEAD(2) token = <S_IDENTIFIER>".*" // table.*
			{
				returnValue = token.image + ".*";
			}
			| returnValue = SQLSimpleExpression() // column name or expression
	    )
	    [ 
	    	[
	    		"AS"
	    		{
	    			returnValue += "AS";
	    		}
	    	]
	    	token = <S_IDENTIFIER>
	    	{
	    		returnValue += token.image;
	    	}
	    ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLSimpleExpression():
{/*@bgen(jjtree) SQLSimpleExpression */
        ASTSQLSimpleExpression jjtn000 = new ASTSQLSimpleExpression(null, JJTSQLSIMPLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLSimpleExpression */
        try {
/*@egen*/
	(
		expression = SQLMultiplicativeExpression()
		{
			returnValue.append(expression);
		}
		(
			(
				"+"
				{
					returnValue.append("+");
				}
				| "-"
				{
					returnValue.append("-");
				}
				| "||"
				{
					returnValue.append("||");
				}
			) 
			expression = SQLMultiplicativeExpression()
			{
				returnValue.append(expression);
			}
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


String SQLMultiplicativeExpression():
{/*@bgen(jjtree) SQLMultiplicativeExpression */
        ASTSQLMultiplicativeExpression jjtn000 = new ASTSQLMultiplicativeExpression(null, JJTSQLMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLMultiplicativeExpression */
        try {
/*@egen*/
	(
		expression = SQLUnaryExpression()	//TODO: exponent?
		{
			returnValue.append(expression);
		}
		(
			(
				"*"
				{
					returnValue.append("*");
				}
				| "/"
				{
					returnValue.append("/");
				}
				| "="
				{
					returnValue.append("=");
				}
			)
			expression = SQLUnaryExpression()	//TODO: exponent?
			{
				returnValue.append(expression);
			}
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLUnaryExpression():
{/*@bgen(jjtree) SQLUnaryExpression */
        ASTSQLUnaryExpression jjtn000 = new ASTSQLUnaryExpression(null, JJTSQLUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLUnaryExpression */
        try {
/*@egen*/
	(
	    [
	    	"+"
	    	{
	    		returnValue.append("+");
	    	}
	    	| "-"
	    	{
	    		returnValue.append("-");
	    	}
	    ] 
	    expression = SQLPrimaryExpression()
	    {
	    	returnValue.append(expression);
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLPrimaryExpression():
{/*@bgen(jjtree) SQLPrimaryExpression */
        ASTSQLPrimaryExpression jjtn000 = new ASTSQLPrimaryExpression(null, JJTSQLPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
	Token token;
	QueryData queryData;
}
{/*@bgen(jjtree) SQLPrimaryExpression */
        try {
/*@egen*/
	(
	    token = <S_NUMBER>
	    {
	    	returnValue.append(token.image);
	    }
		| token = <S_CHAR_LITERAL>
	    {
	    	returnValue.append(token.image);
	    }
		| token = <S_IDENTIFIER>
	    {
	    	returnValue.append(token.image);
	    }
		| "NULL"
	    {
	    	returnValue.append("NULL");
	    }
		| "("
	    {
	    	returnValue.append("(");
	    }
		(
			LOOKAHEAD(3) queryData = Query()
			{
				returnValue.append(queryData.toString());	//TODO: Fix this!!:.
			}
			| expression = SQLExpression()
			{
				returnValue.append(expression);
			}
		)
		")"
		{
			returnValue.append(")");
		}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLExpression():
{/*@bgen(jjtree) SQLExpression */
        ASTSQLExpression jjtn000 = new ASTSQLExpression(null, JJTSQLEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLExpression */
        try {
/*@egen*/
	(
	    expression = SQLAndExpression()
	    {
	    	returnValue.append(expression);
	    } 
	    (
	    	"OR"
	    	{
	    		returnValue.append("OR");
	    	}
	    	expression = SQLAndExpression()
	    	{
	    		returnValue.append(expression);
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLAndExpression():
{/*@bgen(jjtree) SQLAndExpression */
        ASTSQLAndExpression jjtn000 = new ASTSQLAndExpression(null, JJTSQLANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLAndExpression */
        try {
/*@egen*/
	(
	    expression = SQLUnaryLogicalExpression()
	    {
	    	returnValue.append(expression);
	    }
	    (
	    	"AND"
	    	{
	    		returnValue.append("AND");
	    	}
	    	expression = SQLUnaryLogicalExpression()
	    	{
	    		returnValue.append(expression);
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLUnaryLogicalExpression():
{/*@bgen(jjtree) SQLUnaryLogicalExpression */
        ASTSQLUnaryLogicalExpression jjtn000 = new ASTSQLUnaryLogicalExpression(null, JJTSQLUNARYLOGICALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLUnaryLogicalExpression */
        try {
/*@egen*/
	(
	    LOOKAHEAD(2) expression = ExistsClause()
	    {
	    	returnValue.append(expression);
	    }
		|(
			[
				"NOT"
				{
					returnValue.append("NOT");
				}
			]
			expression = SQLRelationalExpression()
			{
				returnValue.append(expression);
			}
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String ExistsClause():
{/*@bgen(jjtree) ExistsClause */
        ASTExistsClause jjtn000 = new ASTExistsClause(null, JJTEXISTSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
	QueryData queryData;
}
{/*@bgen(jjtree) ExistsClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		returnValue.append("NOT");
	    	}
	    ] 
	    "EXISTS"
	    {
	    	returnValue.append("EXISTS");
	    }
	    "("
	    {
	    	returnValue.append("(");
	    } 
	    queryData = Query()
	    {
	    	returnValue.append(queryData.toString()); //TODO: Fix this!!:.
	    } 
	    ")"
	    {
	    	returnValue.append(")");
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLRelationalExpression():
{/*@bgen(jjtree) SQLRelationalExpression */
        ASTSQLRelationalExpression jjtn000 = new ASTSQLRelationalExpression(null, JJTSQLRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLRelationalExpression */
try {
/*@egen*/
(
    /* Only after looking past "(", Expression() and "," we will know that
    it is expression list */
    
    (
        LOOKAHEAD(
            "("
            {
                returnValue.append("(");
            }
            expression = SQLSimpleExpression()
            {
                returnValue.append(expression);
            }
            ","
            {
                returnValue.append(",");
            }
        )
    
        "("
        {
            returnValue.append("(");
        }
        expression = SQLExpressionList()
        {
            returnValue.append(expression);
        }
        ")"
        {
            returnValue.append(")");
        }
        | 
        (
            expression = SQLSimpleExpression()
            {
                returnValue.append(expression);
            }
        )
    )
    
    /* Lookahead(2) is required because of NOT IN,NOT BETWEEN and NOT LIKE */
    (
        expression = SQLRelationalOperatorExpression()
        {
            returnValue.append(expression);
        }
        | LOOKAHEAD(2) (expression = SQLInClause())
        {
            returnValue.append(expression);
        }
        | LOOKAHEAD(2) (expression = SQLBetweenClause())
        {
            returnValue.append(expression);
        }
        | LOOKAHEAD(2) (expression = SQLLikeClause())
        {
            returnValue.append(expression);
        }
        | expression = IsNullClause()
        {
            returnValue.append(expression);
        }
    )?
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

String SQLExpressionList():
{/*@bgen(jjtree) SQLExpressionList */
        ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(null, JJTSQLEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLExpressionList */
        try {
/*@egen*/
	(
	    expression = SQLExpression()
	    {
	    	returnValue.append(expression);
	    }
	    (
	    	","
	    	{
	    		returnValue.append(",");
	    	}
	    	expression = SQLExpression()
	    	{
	    		returnValue.append(expression);
	    	}
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLRelationalOperatorExpression():
{/*@bgen(jjtree) SQLRelationalOperatorExpression */
        ASTSQLRelationalOperatorExpression jjtn000 = new ASTSQLRelationalOperatorExpression(null, JJTSQLRELATIONALOPERATOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
	QueryData queryData;
}
{/*@bgen(jjtree) SQLRelationalOperatorExpression */
    try {
/*@egen*/
    /* Only after seeing an ANY/ALL or "(" followed by a SubQuery() we can
    determine that is is a sub-query
    */
    (   LOOKAHEAD(
			"ANY"
			{
				returnValue.append("ANY");
			}
			| "ALL"
			{
				returnValue.append("ALL");
			}
			| 
				"("
				{
					returnValue.append("(");
				} 
				"SELECT"
				{
					returnValue.append("SELECT");
				}
    	)
        (
        	[
        		"ALL"
        		{
        			returnValue.append("ALL");
        		}
        		| "ANY"
        		{
        			returnValue.append("ANY");
        		}
        	] 
        	"("
        	{
        		returnValue.append("(");
        	} 
        	queryData = Query()
        	{
        		returnValue.append(queryData.toString());	//TODO: Fix this!!:.
        	} 
        	")"
        	{
        		returnValue.append(")");
        	}
        )
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

String SQLInClause():
{/*@bgen(jjtree) SQLInClause */
        ASTSQLInClause jjtn000 = new ASTSQLInClause(null, JJTSQLINCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
	QueryData queryData;
}
{/*@bgen(jjtree) SQLInClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		returnValue.append("NOT");
	    	}
	    ] 
	    "IN"
	    {
	    	returnValue.append("IN");
	    } 
	    "("
	    {
	    	returnValue.append("(");
	    } 
	    (
	    	LOOKAHEAD(3) queryData = Query()
	    	{
	    		returnValue.append(queryData.toString());	//TODO: Fix this!!:.
	    	} 
	    	| expression = SQLExpressionList()
	    	{
	    		returnValue.append(expression);
	    	}
	    ) 
	    ")"
	    {
	    	returnValue.append(")");
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLBetweenClause():
{/*@bgen(jjtree) SQLBetweenClause */
        ASTSQLBetweenClause jjtn000 = new ASTSQLBetweenClause(null, JJTSQLBETWEENCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLBetweenClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		returnValue.append("NOT");
	    	}
	    ]
	    "BETWEEN"
	    {
	    	returnValue.append("BETWEEN");
	    } 
	    expression = SQLSimpleExpression()
	    {
	    	returnValue.append(expression);
	    } 
	    "AND"
	    {
	    	returnValue.append("AND");
	    } 
	    expression = SQLSimpleExpression()
	    {
	    	returnValue.append(expression);
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String SQLLikeClause():
{/*@bgen(jjtree) SQLLikeClause */
        ASTSQLLikeClause jjtn000 = new ASTSQLLikeClause(null, JJTSQLLIKECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
	String expression;
}
{/*@bgen(jjtree) SQLLikeClause */
        try {
/*@egen*/
	(
	    [
	    	"NOT"
	    	{
	    		returnValue.append("NOT");
	    	}
	    ] 
	   	"LIKE"
	   	{
	   		returnValue.append("LIKE");
	   	}
	   	expression = SQLSimpleExpression()
	   	{
	   		returnValue.append(expression);
	   	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String IsNullClause():
{/*@bgen(jjtree) IsNullClause */
        ASTIsNullClause jjtn000 = new ASTIsNullClause(null, JJTISNULLCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuilder returnValue = new StringBuilder();
}
{/*@bgen(jjtree) IsNullClause */
        try {
/*@egen*/
	(
	    "IS"
	    {
	    	returnValue.append("IS");
	    }
	    [
	    	"NOT"
	    	{
	    		returnValue.append("NOT");
	    	}
	    ]
	    "NULL"
	    {
	    	returnValue.append("NULL");
	    }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return returnValue.toString();
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

List<RelationData> FromClause():
{/*@bgen(jjtree) FromClause */
        ASTFromClause jjtn000 = new ASTFromClause(null, JJTFROMCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	List<RelationData> returnValue = new ArrayList<RelationData>();
	RelationData relation;
}
{/*@bgen(jjtree) FromClause */
    try {
/*@egen*/
    "FROM" 
    relation = QueryTableExpression()
    {
    	returnValue.add(relation);
    }
    ( 
    	"," relation = QueryTableExpression()
    	{
    		returnValue.add(relation);
    	}
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

RelationData QueryTableExpression():
{/*@bgen(jjtree) QueryTableExpression */
        ASTQueryTableExpression jjtn000 = new ASTQueryTableExpression(null, JJTQUERYTABLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	RelationData returnValue = null;
	Token token = null;
	QueryData queryData = null;
}
{/*@bgen(jjtree) QueryTableExpression */
    try {
/*@egen*/
    (
		token = <S_IDENTIFIER>
		| LOOKAHEAD(3) "(" queryData = Query() ")"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
		if(token != null){
			returnValue = new SimpleRelationData(token.image);
		} else if(queryData != null){
			returnValue = new QueryRelationData(queryData);
		}
		return returnValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

String WhereClause():
{/*@bgen(jjtree) WhereClause */
        ASTWhereClause jjtn000 = new ASTWhereClause(null, JJTWHERECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	String returnValue;
}
{/*@bgen(jjtree) WhereClause */
        try {
/*@egen*/
	(
    	"WHERE"
    	returnValue = SQLExpression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    	return returnValue;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}